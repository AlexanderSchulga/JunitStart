CTRL ALT O

Если хотим сделать мерж из веток в более высого ранга ветку, может быть конфлик. Тогда идея предоставит
выбор нам. Там мы можем либо то, либо то или все вместе.

---------------------
Вернуться на прежнюю версию кода  вветке, можно
внизу надпись Git, откроются ветки. Правой кнопко меню, выбираем revert Comit
У каждого комита свой номер

В файле Readme иногда пишут как работать с той или иной библиотекой и тд
gitignore - то что нужно игнорировать при работе с гитом на яве

Что бы вернуть вкладку коммит в sidebar- settings - version control -
- commit - use not modal comit interface

---------------------------
pull request v git hub это запрос на слияние с веткой запушиной

------------------------

cheripic --  комит с комитом

-----------------------------

Ветка 1

Возвратился с папкой идеа с гитигнором через
Git- chekcout revision в меню правой кнопкой на бренч

Перегрузка методов-----
разные параметры и их количество
А так же тип параметров

---------------------------
psvm ----создание метода мейн


--------------------------
Protected ---- как и private, только имеют доступы наследники
-------------------------------
С помощью рефлексии можно обращаться к приватным полям методов

------------------------------
Классы называются именем Существительным
Методы глаголами
---------------------------
Абстрактные классы и интерфейсы немного похожи,
но все же разные
Интерфейсы - это шаблон как будет выглядеть реализация
Наследование только от одного, а имплементировать много можно
Из интерфейсов можно получить множественное наследование
через default - но это частный случай

------------------------------------
Напрямую с Json не работаю для чтения и записи
использую гесоны и тд...

junit --- тестовый runer, то что запускает тесты

maven---сборщик проектов, кода.
Базовый архетип--порядок папок, файлов, создание-
файлов по умолчанию--папка тест, Main и т.д.
Справа в мавен-папка Lifecycle---
жизненые циклы, что можно сделать

Gradle --- в супепупер проектах и чаще в андройд
разаботке

Unit тесты обычно пишут разработчики для себя

Pom----файл конфигурации---версии джавы,
зависимосте, плагинов, сам зависимости и т.д.

Только именно для тестов, создавать папку в -
-------test-java-tests

В класах, методах указывать слово тест в начале,
для фреймворков

  Через нижнее подчеркивание в методах тестирования можно
название писать, такие стандарты называются
конвеншен.
Но можно и просто без.

Если в зависимости Pom-e в junit указано в scope Тест--
то junit будет работать только для папки Тест, если убрать
scope, то можно для туда и туда, другой скоп можно сделать
только для мейна
-----------------------------------------
Что бы методот был тестовым и появился Run, нужно над ним аннотацию Тест
----------------------------------------------
Для подключения к базе там или еще что то,
что нужно для каждого метода--
в классе в начале прописываем анотацию @Before и метод setUp
в конце @After и метод tearDown ---отключить
Лучше выносить в отдельный класс и наследовать
PS названия можно поменять----------------------
@BeforeEach и @AfterEach в юните 5
--------------------------------------------------------
Всегда должен быть базовый пустой конструктор,
если добавляю непустой, что бы вызывать класс с дефолтными
переменными класса.
_____________________________________________________-
Alt+enter-----появляется список откуда импортировать
при наведении на красный класс, метод и тд.
---------------------------------------------------
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>5.11.4</version>
            <scope>test</scope>
        </dependency>
Параметризация, начинается с junit 5, она для того
что бы кучу методов не писать со схожими данными,
например разный цвет и т.д.
 @ParameterizedTest
 @ValueSource(strings = {"Red", "blue", "Yellow"})------------
 @ArgumentsSource----для параметризирования нескольких типов или параметров
 при этом не забываем создать класс где, implements ArgumentsProvider и
     @Override
     public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
         return Stream.of(
                 Arguments.of("Red", 14),
                 Arguments.of("blue", 140),
                 Arguments.of("Red", 100),
                 Arguments.of("Yellow", 1055),
                 Arguments.of("blue", 1054)

 Тест и его параметризацию нужно в отдельный пакет(папку)
--------------------------------------------------
Selenium - средство для автоматизации тестирования сайтов
для web ui тестирования
На его движке драйвера, строится связь кода и браузера

Selenium IDE плохо масштабируется и его тяжело поддерживать
Он записывает действия, при смене действий, смене коор-динат
 и тд. приходится переза-писывать все сначала
 -------------------------
Selenium Webdriver тоже самое, но пишем сами, можем изменять и т.д.
Webdriver предоставляет общий интерфейс Selenium-а

Поиск xpath и css селекторов в браузере в devtools----
ctrl+f как обычно.
У Selenium есть базовый свой набор селекторов
пример:
static class
By.ByClassName
static class
By.ByCssSelector
static class
By.ByXPath
static class
By.ByName и т.д.........

Есть в интете синтаксисы написания локаторов
Поиск по xpath начинается с /
/Один слешь--на один элемент в глубь, -абсолют
//Два слеша, на n элементов в глубь  --относит

Если одинаковых тегов много, то нужно конкретезировать
атрибутами:
//Button[@name="submit_search" and @type="submit"]
Можно один или несколько атрибутов.

Дальше относительно найденного можно еще:
//Button[@name="submit_search"]//a[@text()=...имя ссылки]
text тут не атрибут, а функция xpath-а.

CSS локатор:(пробелы указывают, что ищем относительно текущего
//div#block_top_menu a[title="....."]

Оси xPath ---
//div[@id="cart"]/following-sibling::div[....]
один из
following-sibling---что бы не в глубь,
а потому же уровню


//Для работы с фреймами в драйвере есть switchTo(), можно сделать xPath до
        //фрейма, выбрать в switchTo() webElement
        //webDriver.switchTo().frame();
        //Для прокрутки страницы в низ, вызывается javascript метод ScrollToView(),
        //и потом клик